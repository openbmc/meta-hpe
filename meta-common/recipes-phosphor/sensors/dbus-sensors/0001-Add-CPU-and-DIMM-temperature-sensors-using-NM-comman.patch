From 14871f53ea13c32d9aeedebd570144a54cb6f248 Mon Sep 17 00:00:00 2001
From: Jorge Cisneros <jorge.cisneros@hpe.com>
Date: Fri, 31 Jul 2020 14:54:04 +0000
Subject: [PATCH]  Add CPU and DIMM temperature sensors using NM command
 (UPDATED)

---
 include/IpmbSensor.hpp |  13 +-
 include/Thresholds.hpp |   4 +
 include/sensor.hpp     |   2 +
 src/IpmbSensor.cpp     | 488 ++++++++++++++++++++++++++++++++++++++++-
 src/Thresholds.cpp     |  41 ++++
 5 files changed, 542 insertions(+), 6 deletions(-)
 mode change 100644 => 100755 include/IpmbSensor.hpp
 mode change 100644 => 100755 include/Thresholds.hpp
 mode change 100644 => 100755 include/sensor.hpp
 mode change 100644 => 100755 src/IpmbSensor.cpp
 mode change 100644 => 100755 src/Thresholds.cpp

diff --git a/include/IpmbSensor.hpp b/include/IpmbSensor.hpp
old mode 100644
new mode 100755
index e1b1ddb..a5fcfe2
--- a/include/IpmbSensor.hpp
+++ b/include/IpmbSensor.hpp
@@ -17,7 +17,10 @@ enum class IpmbType
     PXE1410CVR,
     IR38363VR,
     ADM1278HSC,
-    mpsVR
+    mpsVR,
+    CPUTemp,
+    CPUDTS,
+    DIMMTemp
 };
 
 enum class IpmbSubType
@@ -53,6 +56,8 @@ struct IpmbSensor : public Sensor
     void loadDefaults(void);
     void runInitCmd(void);
     bool processReading(const std::vector<uint8_t>& data, double& resp);
+    bool powerOnDelay(void);
+
 
     IpmbType type;
     IpmbSubType subType;
@@ -63,9 +68,15 @@ struct IpmbSensor : public Sensor
     uint8_t command;
     uint8_t deviceAddress;
     uint8_t errorCount;
+    uint8_t dimmChannel;
+    uint8_t cpuIndex;
+    uint16_t tjmax;
     std::vector<uint8_t> commandData;
     std::optional<uint8_t> initCommand;
     std::vector<uint8_t> initData;
+    bool isPreviousPowerStateOff;
+    int powerOnDelayTick;
+    int currentPowerOnDelayTick;
 
     ReadingFormat readingFormat;
 
diff --git a/include/Thresholds.hpp b/include/Thresholds.hpp
old mode 100644
new mode 100755
index 57d6f52..316356b
--- a/include/Thresholds.hpp
+++ b/include/Thresholds.hpp
@@ -128,6 +128,10 @@ struct ThresholdTimer
     Sensor* sensor;
 };
 
+bool parseThresholdFromJSON(
+    const nlohmann::json jsonData,
+    std::vector<thresholds::Threshold>& thresholdVector);
+
 bool parseThresholdsFromConfig(
     const SensorData& sensorData,
     std::vector<thresholds::Threshold>& thresholdVector,
diff --git a/include/sensor.hpp b/include/sensor.hpp
old mode 100644
new mode 100755
index 982365a..3ff5c51
--- a/include/sensor.hpp
+++ b/include/sensor.hpp
@@ -40,6 +40,7 @@ struct Sensor
     std::string objectType;
     double maxValue;
     double minValue;
+    std::string unit;
     std::vector<thresholds::Threshold> thresholds;
     std::shared_ptr<sdbusplus::asio::dbus_interface> sensorInterface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> thresholdInterfaceWarning;
@@ -86,6 +87,7 @@ struct Sensor
 
         sensorInterface->register_property("MaxValue", maxValue);
         sensorInterface->register_property("MinValue", minValue);
+        sensorInterface->register_property("Unit", unit);
         sensorInterface->register_property(
             "Value", value, [&](const double& newValue, double& oldValue) {
                 return setSensorValue(newValue, oldValue);
diff --git a/src/IpmbSensor.cpp b/src/IpmbSensor.cpp
old mode 100644
new mode 100755
index d8b0d4f..226b351
--- a/src/IpmbSensor.cpp
+++ b/src/IpmbSensor.cpp
@@ -39,6 +39,8 @@
 #include <tuple>
 #include <variant>
 #include <vector>
+#include <nlohmann/json.hpp>
+#include <fstream>
 
 constexpr const bool debug = false;
 
@@ -50,6 +52,14 @@ static constexpr double ipmbMinReading = 0;
 static constexpr uint8_t meAddress = 1;
 static constexpr uint8_t lun = 0;
 
+static constexpr uint8_t intelManufacturerLength = 3;
+static constexpr uint8_t nmDeviceNotPresent = 0xFF;
+static uint8_t totalCPUs = 0;
+static uint8_t channelsPerCPU = 0;
+static uint8_t dimmsPerChannel = 0;
+
+static std::string unitDegreesC = std::string("xyz.openbmc_project.Sensor.Value.Unit.DegreesC");
+
 static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
 
 using IpmbMethodType =
@@ -135,6 +145,7 @@ void IpmbSensor::runInitCmd()
 
 void IpmbSensor::loadDefaults()
 {
+    uint8_t cpuMask = 0;
     if (type == IpmbType::meSensor)
     {
         commandAddress = meAddress;
@@ -210,6 +221,104 @@ void IpmbSensor::loadDefaults()
                     0x00, 0x00, 0x00, 0x02, 0x00, 0x00,          0x00};
         readingFormat = ReadingFormat::byte3;
     }
+    else if (type == IpmbType::CPUTemp)
+    {
+        commandAddress = meAddress;
+        netfn = 0x2e;       // me bridge
+        command = 0x4b;     // Get CPU and Memory Temperature
+        if ((totalCPUs >0)&&(totalCPUs <= 4))
+        {
+            cpuMask = ~(0xff << totalCPUs);
+            cpuMask = 0x80|cpuMask;
+            commandData = {0x57, 0x01, 0x00, cpuMask, 0x00, 0x00, 0x00,
+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+        }
+        else
+        {
+            commandData = {};
+            std::cerr << "Invalid data from device: " << name
+            << " ,incorrect total cpu number.\n";
+        }
+    }
+    else if (type == IpmbType::CPUDTS)
+    {
+        commandAddress = meAddress;
+        netfn = 0x2e;       // me bridge
+        command = 0x4b;     // Get CPU and Memory Temperature
+        if ((totalCPUs >0)&&(totalCPUs <= 4))
+        {
+            cpuMask = ~(0xff << totalCPUs);
+            cpuMask = 0x80|cpuMask;
+            commandData = {0x57, 0x01, 0x00, cpuMask, 0x00, 0x00, 0x00,
+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+        }
+        else
+        {
+            commandData = {};
+            std::cerr << "Invalid data from device: " << name
+            << " ,incorrect total cpu number.\n";
+        }
+    }
+    else if (type == IpmbType::DIMMTemp)
+    {
+        commandAddress = meAddress;
+        netfn = 0x2e;       // me bridge
+        command = 0x4b;     // Get CPU and Memory Temperature
+        uint8_t dimmMask = ~(0xff << dimmsPerChannel);
+        uint8_t i = 0;
+        if (dimmChannel <= 3)
+        {
+            // channel 0~3
+            commandData = {0x57, 0x01, 0x00, 0x83};
+        }
+        else if ((dimmChannel > 3) && (dimmChannel <= 7))
+        {
+            // channel 4~7
+            commandData = {0x57, 0x01, 0x00, 0xc3};
+        }
+        else
+        {
+            commandData = {};
+            std::cerr << "Invalid data from device: " << name
+            << " ,incorrect dimm channel.\n";
+        }
+        if ((totalCPUs >0)&&(totalCPUs <= 4))
+        {
+            for (i=0;i<4;i++)
+            {
+                if(i<totalCPUs)
+                {
+                    commandData.emplace_back(dimmMask);
+                    commandData.emplace_back(dimmMask);
+                    commandData.emplace_back(dimmMask);
+                    commandData.emplace_back(dimmMask);
+                }
+                else
+                {
+                    commandData.emplace_back(0x00);
+                    commandData.emplace_back(0x00);
+                    commandData.emplace_back(0x00);
+                    commandData.emplace_back(0x00);
+                }
+            }
+            if constexpr (debug)
+            {
+                std::cout<<name<<"_commandData:";
+                for (i=0;i<commandData.size();i++)
+                    std::cout<<std::hex<<static_cast<int>(commandData.at(i))<<" ";
+                std::cout<<"\n";
+            }
+        }
+        else
+        {
+            commandData = {};
+            std::cerr << "Invalid data from device: " << name
+            << " ,incorrect total cpu number.\n";
+        }
+
+    }
     else
     {
         throw std::runtime_error("Invalid sensor type");
@@ -274,16 +383,140 @@ bool IpmbSensor::processReading(const std::vector<uint8_t>& data, double& resp)
 
             resp = ((data[4] << 8) | data[3]) >> 3;
             return true;
+
+        
         default:
             throw std::runtime_error("Invalid reading type");
     }
 }
 
+bool IpmbSensor::powerOnDelay(void)
+{
+    if(isPreviousPowerStateOff)
+    {
+        if(currentPowerOnDelayTick > powerOnDelayTick)
+        {
+            isPreviousPowerStateOff = false;
+            currentPowerOnDelayTick = 0;
+            return false;
+        }
+        else
+        {
+            currentPowerOnDelayTick++;
+            return true;
+        }
+    }
+    return false;
+}
+
 void IpmbSensor::read(void)
 {
     static constexpr size_t pollTime = 1; // in seconds
 
     waitTimer.expires_from_now(boost::posix_time::seconds(pollTime));
+    if(type == IpmbType::CPUTemp)
+    {
+        waitTimer.async_wait([this](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being canceled
+        }
+        // check sensor read state
+        if (!isPowerOn() && readState == PowerState::on)
+        {
+            isPreviousPowerStateOff = true;
+            updateValue(0);
+            read();
+            return;
+        }
+
+        uint8_t nf = 0x04;
+        uint8_t cmd = 0x2d;
+        std::vector<uint8_t> cmd_data;
+        if(deviceAddress == 0)
+        {
+            //CPU 0 T-JMAX
+            cmd_data = {48};
+        } else if (deviceAddress == 1)
+        {
+            //CPU 1 T-JMAX
+            cmd_data = {49};
+        } else if (deviceAddress == 2)
+        {
+            //CPU 2 T-JMAX
+            cmd_data = {50};
+        } else if (deviceAddress == 3)
+        {
+            //CPU 3 T-JMAX
+            cmd_data = {51};
+        }
+        else
+        {
+            if constexpr (debug)
+            {
+                std::cerr << "Invalid data from device: " << name
+                << " ,incorrect cpu index.\n";
+            }
+        }
+
+        if (!cmd_data.empty())
+        {
+            // send get TJMax sensor reading command
+            dbusConnection->async_method_call(
+                [this](boost::system::error_code ec,
+                const IpmbMethodType& response) {
+                    const int& res_status = std::get<0>(response);
+                    if (ec || res_status)
+                    {
+                        if constexpr (debug)
+                        {
+                            std::cerr
+                            << "Error send TJMax sensor reading command: "
+                            << name << " ec:" << ec << " st:" << res_status
+                            << "\n";
+                        }
+                    }
+                    if (!isPowerOn() && readState == PowerState::on)
+                    {
+                        isPreviousPowerStateOff = true;
+                        updateValue(0);
+                        read();
+                        return;
+                    }
+                    const std::vector<uint8_t>& res_data = std::get<5>(response);
+
+                    if constexpr (debug)
+                    {
+                        std::cout << name << ": ";
+                        for (size_t d : res_data)
+                        {
+                            std::cout << std::hex << d;
+                            std::cout << " ";
+                        }
+                        std::cout << "\n";
+                    }
+
+                    if (res_data.size() == 3)
+                    {
+                        // eg: res: 5c 40 c0
+                        tjmax = res_data[0];
+                    }
+                    else
+                    {
+                        if constexpr (debug)
+                        {
+                            std::cerr << "Invalid data from device: " << name
+                            << " ,incorrect cpu tjamx response.\n";
+                        }
+                    }
+                },
+                "xyz.openbmc_project.Ipmi.Channel.Ipmb",
+                "/xyz/openbmc_project/Ipmi/Channel/Ipmb", "org.openbmc.Ipmb",
+                "sendRequest", commandAddress, nf, lun, cmd, cmd_data);
+        }
+        });
+    }
+
     waitTimer.async_wait([this](const boost::system::error_code& ec) {
         if (ec == boost::asio::error::operation_aborted)
         {
@@ -323,13 +556,123 @@ void IpmbSensor::read(void)
 
                 double value = 0;
 
-                if (!processReading(data, value))
+                if (type == IpmbType::CPUTemp)
                 {
-                    incrementError();
-                    read();
-                    return;
+                    uint16_t cpu_dts = 0;
+                    uint8_t data_offset = 0;
+                    data_offset = intelManufacturerLength + deviceAddress;
+                    if (data.size() > data_offset)
+                    {
+                        cpu_dts = data[data_offset];
+                    }
+                    else
+                    {
+                        if constexpr (debug)
+                        {
+                            std::cerr << "Invalid data from device: " << name
+                            << " data_size:" << data.size() << " data_offset:" << unsigned(data_offset)
+                            << " ,incorrect cpu data offset.\n";
+                        }
+                        read();
+                        return;
+                    }
+                    if (cpu_dts == nmDeviceNotPresent)
+                    {
+                        value = 0;
+                    }
+                    else
+                    {
+                        if(tjmax != 0)
+                        {
+                            value = tjmax - cpu_dts;
+                            if constexpr (debug)
+                            {
+                                std::cout<< "cpu:"<<name<<" tjmax:"
+                                << static_cast<int>(tjmax)<< " dts:"
+                                << static_cast<int>(cpu_dts) << " temp:"<< value
+                                <<"\n";
+                                std::cout<<"-------------------\n";
+                            }
+                        }
+                    }
+                }
+                else if (type == IpmbType::CPUDTS)
+                {
+                    uint8_t data_offset = 0;
+                    data_offset = intelManufacturerLength + deviceAddress;
+                    if (data.size() > data_offset)
+                    {
+                        value = data[data_offset];
+                        if constexpr (debug)
+                        {
+                            std::cout<<"dts:"<<static_cast<int>(value)<<"\n";
+                            std::cout<<"-------------------\n";
+                        }
+                        if (value == nmDeviceNotPresent)
+                        {
+                            value = 0;
+                        }
+                    }
+                    else
+                    {
+                        if constexpr (debug)
+                        {
+                            std::cerr << "Invalid data from device: " << name
+                            << " data_size:" << data.size() << " data_offset:" << unsigned(data_offset)
+                            << " ,incorrect cpu data offset.\n";
+                        }
+                        read();
+                        return;
+                    }
+                }
+                else if (type == IpmbType::DIMMTemp)
+                {
+                    // eg: DIMM1_Temp: 57 1 0 3a 3b 22 ff 24 ff 24 ff 22 ff 22 ff 25 ff 25 ff 22 ff
+                    // dimmsPerChannel = 2, dimmChannel = 3, deviceAddress = 0, cpuIndex=0
+                    // dimmChannel:0~n, deviceAddress:0~n
+                    // data_offset = 5+6 = 11, value = data[11]
+                    // memory channel set is 0~3 or 4~7.
+                    uint8_t data_offset = 0;
+                    data_offset = intelManufacturerLength + totalCPUs + dimmsPerChannel*(dimmChannel % 4) +
+                                dimmsPerChannel * 4 * cpuIndex + deviceAddress;
+                    if (data.size() > data_offset)
+                    {
+                        value = data[data_offset];
+                        if (value == nmDeviceNotPresent)
+                        {
+                            value = 0;
+                        }
+                    }
+                    else
+                    {
+                        if constexpr (debug)
+                        {
+                            std::cerr << "Invalid data from device: " << name
+                            << " data_size:" << data.size() << " data_offset:" << unsigned(data_offset)
+                            << " ,incorrect dimm data offset.\n";
+                        }
+                        read();
+                        return;
+                    }
+                    if constexpr (debug)
+                    {
+                        std::cout<<"totalcpu:"<<static_cast<int>(totalCPUs)<<" channelsPerCPU:"<<static_cast<int>(channelsPerCPU)
+                        <<" dimmsPerChannel:"<<static_cast<int>(dimmsPerChannel)
+                        <<" dimmChannel:"<<static_cast<int>(dimmChannel)<<" cpuIndex:"<<static_cast<int>(cpuIndex)
+                        <<" data_offset:"<<static_cast<int>(data_offset)<<"\n";
+                        std::cout<<name<<" value:"<<value<<"\n";
+                        std::cout<<"-------------------\n";
+                    }
+                }
+                else
+                {
+                    if (!processReading(data, value))
+                    {
+                        incrementError();
+                        read();
+                        return;
+                    }
                 }
-
                 /* Adjust value as per scale and offset */
                 value = (value * scaleVal) + offsetVal;
                 updateValue(value);
@@ -522,6 +865,140 @@ void reinitSensors(sdbusplus::message::message& message)
     }
 }
 
+void createNMCmdSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<IpmbSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    constexpr const char *configFilePath =
+        "/usr/share/dbussensors/nm-sensors.json";
+    std::ifstream configFile(configFilePath);
+    if (!configFile.is_open())
+    {
+        std::cerr << "createNMCmdSensors: Cannot open config path" <<"\n";
+        return;
+    }
+
+    try
+    {
+        auto data = nlohmann::json::parse(configFile, nullptr);
+        totalCPUs = data["TotalCPUs"].get<int>();
+        channelsPerCPU = data["ChannelsPerCPU"].get<int>();
+        dimmsPerChannel = data["DIMMsPerChannel"].get<int>();
+        if constexpr (debug)
+        {
+            std::cout<<"totalcpu:"<<totalCPUs<<" channelsPerCPU:"<<channelsPerCPU
+            <<" dimmsPerChannel:"<<dimmsPerChannel<<"\n";
+        }
+        for (const auto &cpuConfig : data["CPUs"])
+        {
+            const std::string &name = cpuConfig["Name"].get<std::string>();
+            const std::string &powerState = cpuConfig["PowerState"].get<std::string>();
+            const std::string &sensorClass = cpuConfig["Class"].get<std::string>();
+            const std::string &type = cpuConfig["Type"].get<std::string>();
+            const std::string& sensorConfiguration = "/xyz/openbmc_project/inventory/system/chassis/dbus_sensors.conf";
+            std::string sensorTypeName = "temperature";
+            uint8_t deviceAddress = cpuConfig["CPUIndex"].get<int>();
+            std::vector<thresholds::Threshold> sensorThresholds;
+
+            if (!parseThresholdFromJSON(cpuConfig["Thresholds"], sensorThresholds))
+            {
+                    std::cerr << "error populating thresholds for " << name << "\n";
+            }
+
+            auto& sensor = sensors[name];
+            sensor = std::make_unique<IpmbSensor>(
+                dbusConnection, io, name, sensorConfiguration, objectServer,
+                std::move(sensorThresholds), deviceAddress, sensorTypeName);
+            setReadState(powerState, sensor->readState);
+            sensor->tjmax = 0;
+            sensor->powerOnDelayTick = data["PowerOnDelay"].get<int>();
+            sensor->currentPowerOnDelayTick = 0;
+            sensor->isPreviousPowerStateOff = false;
+            sensor->scaleVal = 1;
+            sensor->offsetVal = 0;
+
+            if (sensorClass == "CPUTemp")
+            {
+                sensor->type = IpmbType::CPUTemp;
+                sensor->unit = unitDegreesC;
+            } else if (sensorClass == "CPUDTS")
+            {
+                sensor->type = IpmbType::CPUDTS;
+                sensor->unit = unitDegreesC;
+            }
+            if constexpr (debug)
+            {
+                std::cout<<" n:"<<name
+                <<" i:"<<unsigned(deviceAddress)<<" p:"<<powerState
+                <<" cl:"<<sensorClass<<" t:"<<type
+                <<"\n";
+            }
+
+            sensor->init();
+        }
+
+        for (const auto &dimmConfig : data["DIMMs"])
+        {
+            const std::string &name = dimmConfig["Name"].get<std::string>();
+            const std::string &powerState = dimmConfig["PowerState"].get<std::string>();
+            const std::string &sensorClass = dimmConfig["Class"].get<std::string>();
+            const std::string &type = dimmConfig["Type"].get<std::string>();
+            const std::string& sensorConfiguration = "/xyz/openbmc_project/inventory/system/chassis/dbus_sensors.conf";
+            std::string sensorTypeName = "temperature";
+            uint8_t deviceAddress = dimmConfig["DIMMIndex"].get<int>();
+            std::vector<thresholds::Threshold> sensorThresholds;
+            if (!parseThresholdFromJSON(dimmConfig["Thresholds"], sensorThresholds))
+            {
+                    std::cerr << "error populating thresholds for " << name << "\n";
+            }
+
+            auto& sensor = sensors[name];
+            sensor = std::make_unique<IpmbSensor>(
+                dbusConnection, io, name, sensorConfiguration, objectServer,
+                std::move(sensorThresholds), deviceAddress, sensorTypeName);
+            setReadState(powerState, sensor->readState);
+            sensor->tjmax = 0;
+            sensor->powerOnDelayTick = data["PowerOnDelay"].get<int>();
+            sensor->currentPowerOnDelayTick = 0;
+            sensor->isPreviousPowerStateOff = false;
+            sensor->scaleVal = 1;
+            sensor->offsetVal = 0;
+
+            if (sensorClass == "DIMMTemp")
+            {
+                sensor->dimmChannel = dimmConfig["DIMMChannel"];
+                sensor->cpuIndex = dimmConfig["CPUIndex"];
+                sensor->unit = unitDegreesC;
+                sensor->type = IpmbType::DIMMTemp;
+            }
+            if constexpr (debug)
+            {
+                std::cout<<" n:"
+                <<name<<" i:"<<unsigned(deviceAddress)<<" ch:"
+                << unsigned(sensor->dimmChannel)
+                <<" p:"<<powerState<<" cl:"<<sensorClass<<" t:"<<type
+                <<" dp:"<< unsigned(dimmsPerChannel)
+                <<"\n";
+            }
+
+            sensor->init();
+        }
+
+    }
+    catch (nlohmann::json::exception &e)
+    {
+        std::cerr << "createNMCmdSensors: Error parsing config file" <<"\n";
+        return;
+    }
+    catch (std::out_of_range &e)
+    {
+        std::cerr << "createNMCmdSensors: Error invalid type" <<"\n";
+        return;
+    }
+}
+
 int main()
 {
 
@@ -533,6 +1010,7 @@ int main()
     initCmdTimer = std::make_unique<boost::asio::deadline_timer>(io);
 
     io.post([&]() { createSensors(io, objectServer, sensors, systemBus); });
+    io.post([&]() { createNMCmdSensors(io, objectServer, sensors, systemBus); });
 
     boost::asio::deadline_timer configTimer(io);
 
diff --git a/src/Thresholds.cpp b/src/Thresholds.cpp
old mode 100644
new mode 100755
index adc1f68..4f645d9
--- a/src/Thresholds.cpp
+++ b/src/Thresholds.cpp
@@ -60,6 +60,47 @@ std::string toBusValue(const Direction& direction)
     }
 }
 
+bool parseThresholdFromJSON(
+    nlohmann::json jsonData,
+    std::vector<thresholds::Threshold>& thresholdVector
+)
+{
+    for (const auto& item:jsonData)
+    {
+        Level level;
+        Direction direction;
+        if (item.find("Direction") == item.end() ||
+            item.find("Severity") == item.end() ||
+            item.find("Value") == item.end())
+        {
+            std::cerr << "Malformed threshold in configuration\n";
+            return false;
+        }
+
+        if ( item["Severity"].get<int>() == 0)
+        {
+            level = Level::WARNING;
+        }
+        else
+        {
+            level = Level::CRITICAL;
+        }
+        if (item["Direction"].get<std::string>() == "less than")
+        {
+            direction = Direction::LOW;
+        }
+        else
+        {
+            direction = Direction::HIGH;
+        }
+        double val = item["Value"].get<double>();
+
+        thresholdVector.emplace_back(level, direction, val);
+
+    }
+    return true;
+}
+
 bool parseThresholdsFromConfig(
     const SensorData& sensorData,
     std::vector<thresholds::Threshold>& thresholdVector,
