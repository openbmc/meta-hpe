From 86d4ae4fb9fc64902847f08ff7c2a0fd2bd76120 Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@hpe.com>
Date: Wed, 5 Jun 2019 21:30:12 +0800
Subject: [PATCH] DEV: Support power operation

---
 op-pwrctl/power_control_obj.c | 65 +++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 63 insertions(+), 2 deletions(-)

diff --git a/op-pwrctl/power_control_obj.c b/op-pwrctl/power_control_obj.c
index ada9b3b..66f4cd7 100644
--- a/op-pwrctl/power_control_obj.c
+++ b/op-pwrctl/power_control_obj.c
@@ -18,6 +18,7 @@ static const gchar* instance_name = "power0";
 static const gchar* dbus_name = "org.openbmc.control.Power";
 
 static int g_pci_reset_held = 1;
+static int g_pgood_state = 0;
 
 static GpioConfigs g_gpio_configs;
 
@@ -25,6 +26,57 @@ static GDBusObjectManagerServer *manager = NULL;
 
 time_t pgood_timeout_start = 0;
 
+
+static gboolean power_up_done(gpointer user_data)
+{
+  int i;
+  int error = 0;
+	uint8_t power_up_out;
+  uint8_t state = *((uint8_t *)user_data);
+  uint8_t pgood_state = 0;
+	PowerGpio *power_gpio = &g_gpio_configs.power_gpio;
+
+	// Only checking Power Off request periodically
+	if (state == 0) {
+		// Checking pgood status
+		int rc = gpio_open(&power_gpio->power_good_in, 0);
+		if(rc != GPIO_OK) {
+			gpio_close(&g_gpio_configs.power_gpio.power_good_in);
+			g_print("ERROR PowerControl: GPIO open error (gpio=%s,rc=%d)\n",
+									&power_gpio->power_good_in.name, rc);
+			return FALSE;
+		}
+		error = gpio_read(&power_gpio->power_good_in, &pgood_state);
+		gpio_close(&power_gpio->power_good_in);
+
+		// Only Power Off request
+		if (error != GPIO_OK || (state != pgood_state)) {
+			g_print("Unexpect pgood state, try it again later ... \n");
+			g_print("Request state - %d, pgood state - %d \n", state, pgood_state);
+			return TRUE;
+		}
+	}
+
+	for (i = 0; i < power_gpio->num_power_up_outs; i++) {
+		GPIO *power_pin = &power_gpio->power_up_outs[i];
+		power_up_out = 0 ^ !power_gpio->power_up_pols[i];
+		error = gpio_open(power_pin, power_up_out);
+		if(error != GPIO_OK) {
+			gpio_close(power_pin);
+			g_print("ERROR PowerControl: GPIO open error (gpio=%s,rc=%d)\n", power_gpio->power_up_outs[i].name, error);
+			continue;
+		}
+		g_print("PowerControl: setting power up %s to %d\n", power_gpio->power_up_outs[i].name, (int)power_up_out);
+		error = gpio_write(power_pin, power_up_out);
+		if(error != GPIO_OK) {
+			gpio_close(power_pin);
+			continue;
+		}
+		gpio_close(power_pin);
+	}
+	return FALSE;
+}
+
 // TODO:  Change to interrupt driven instead of polling
 static gboolean
 poll_pgood(gpointer user_data)
@@ -69,6 +121,7 @@ poll_pgood(gpointer user_data)
 			int i;
 			uint8_t reset_state;
 			control_power_set_pgood(control_power, pgood_state);
+			control_power_set_state(control_power, pgood_state);
 			if(pgood_state == 0)
 			{
 				control_power_emit_power_lost(control_power);
@@ -260,7 +313,7 @@ on_set_power_state(ControlPower *pwr,
 	}
 	// return from method call
 	control_power_complete_set_power_state(pwr,invocation);
-	if(state == control_power_get_state(pwr))
+	if(state == control_power_get_pgood(pwr))
 	{
 		g_print("Power already at requested state: %d\n",state);
 	}
@@ -272,7 +325,7 @@ on_set_power_state(ControlPower *pwr,
 			uint8_t power_up_out;
 			for (i = 0; i < power_gpio->num_power_up_outs; i++) {
 				GPIO *power_pin = &power_gpio->power_up_outs[i];
-				power_up_out = state ^ !power_gpio->power_up_pols[i];
+				power_up_out = 1 ^ !power_gpio->power_up_pols[i];
 				error = gpio_open(power_pin, power_up_out);
 				if(error != GPIO_OK) {
 					gpio_close(power_pin);
@@ -297,6 +350,14 @@ on_set_power_state(ControlPower *pwr,
 			g_print("ERROR PowerControl: GPIO set power state (rc=%d)\n",error);
 		}
 
+		g_pgood_state = state;
+		if(g_pgood_state) {
+			g_timeout_add(200, power_up_done, &g_pgood_state);
+		}
+		else {
+			g_timeout_add(2000, power_up_done, &g_pgood_state);
+		}
+
 		/* If there's a latch, it should be enabled following changes to the
 		 * power pins' states. This commits the changes to the latch states. */
 		if (power_gpio->latch_out.name != NULL) {
